generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id             String          @id @default(cuid())
  name           String          @unique
  isPermanent    Boolean         @default(false)
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  rolePrivileges RolePrivilege[]
  users          User[]
}

model Privilege {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  rolePrivileges RolePrivilege[]
}

model RolePrivilege {
  roleId      String
  privilegeId String
  createdAt   DateTime  @default(now())
  privilege   Privilege @relation(fields: [privilegeId], references: [id], onDelete: Cascade)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, privilegeId])
  @@index([roleId])
  @@index([privilegeId])
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  resetToken        String?            @unique
  resetTokenExpiry  DateTime?
  roleName          String             @default("USER")
  accounts          Account[]
  pushSubscriptions PushSubscription[]
  sessions          Session[]
  role              Role               @relation(fields: [roleName], references: [name])
  establishment     Establishment?

  @@index([roleName], map: "User_roleName_fkey")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Establishment {
  id          String   @id @default(cuid())
  name        String
  address     String
  postalCode  String
  city        String
  email       String?
  phone       String?
  website     String?
  adminId     String   @unique
  logoUrl     String?
  logoFileId  String?
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin       User     @relation(fields: [adminId], references: [id])

  @@index([adminId])
}
